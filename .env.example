# =============================================================================
# ENVIRONMENT CONFIGURATION EXAMPLE - ChatGPT Clone
# =============================================================================
# This file serves as a template for environment variables.
# Copy this file to .env.local and fill in your actual values.
#
# SECURITY WARNING: Never commit .env.local to version control!
# =============================================================================

# =============================================================================
# CLERK AUTHENTICATION
# =============================================================================
# Clerk provides authentication and user management for modern applications
#
# How to get these keys:
# 1. Sign up at https://clerk.com/
# 2. Create a new application
# 3. Go to Dashboard > API Keys
# 4. Copy the Publishable key and Secret key
#
# The publishable key is safe to expose in client-side code
# The secret key must be kept secure and only used server-side
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
CLERK_SECRET_KEY=sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# MongoDB connection string for storing chat conversations and user data
#
# Local MongoDB: mongodb://localhost:27017/chatgpt-clone
# MongoDB Atlas: mongodb+srv://username:password@cluster.mongodb.net/chatgpt-clone
#
# How to get MongoDB Atlas URI:
# 1. Sign up at https://www.mongodb.com/atlas
# 2. Create a new cluster (free tier available)
# 3. Go to Database > Connect > Connect your application
# 4. Copy the connection string and replace <password> with your actual password
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/chatgpt-clone

# =============================================================================
# OPENAI API
# =============================================================================
# OpenAI API key for GPT model access
#
# How to get this key:
# 1. Sign up at https://platform.openai.com/
# 2. Add payment method (required for API access)
# 3. Go to https://platform.openai.com/api-keys
# 4. Create a new secret key
#
# Format: Always starts with 'sk-'
# Security: Keep this key secure - it provides access to paid API services
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# CLOUDINARY CONFIGURATION
# =============================================================================
# Cloudinary provides image and video management services
#
# How to get these keys:
# 1. Sign up at https://cloudinary.com/
# 2. Go to Dashboard (free tier available)
# 3. Find your Cloud name, API Key, and API Secret in the dashboard
#
# Cloud name: Your unique cloudinary identifier
# API Key: Public identifier for your account
# API Secret: Private key for secure operations (keep secret!)
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=123456789012345
CLOUDINARY_API_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# UPLOADCARE CONFIGURATION
# =============================================================================
# Uploadcare provides file uploading and processing services
#
# How to get these keys:
# 1. Sign up at https://uploadcare.com/
# 2. Go to Dashboard > Settings > API keys
# 3. Copy your Public Key and Secret Key
#
# Public Key: Safe to expose in client-side code
# Secret Key: Must be kept secure for server-side operations
UPLOADCARE_PUBLIC_KEY=xxxxxxxxxxxxxxxx
UPLOADCARE_SECRET_KEY=xxxxxxxxxxxxxxxx

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Environment mode - determines app behavior and optimizations
# Values: development, staging, production
NODE_ENV=development

# Application URL - used for redirects, webhooks, and CORS
# Development: http://localhost:3000
# Production: https://your-domain.com
NEXT_PUBLIC_APP_URL=http://localhost:3000

# =============================================================================
# OPTIONAL CONFIGURATIONS
# =============================================================================
# Default storage provider for file uploads
# Values: cloudinary, uploadcare
# Note: Both providers must be configured for fallback to work
DEFAULT_STORAGE_PROVIDER=cloudinary

# Enable or disable file upload functionality
# Values: true, false
ENABLE_FILE_UPLOADS=true

# Maximum file size in bytes
# Examples:
# - 5MB: 5242880
# - 10MB: 10485760
# - 50MB: 52428800
MAX_FILE_SIZE=10485760

# =============================================================================
# BUILD & DEPLOYMENT CONFIGURATION
# =============================================================================
# Build standalone version for Docker deployment
# Values: true, false
BUILD_STANDALONE=false

# Enable webpack bundle analyzer
# Values: true, false
# Usage: ANALYZE=true npm run build
ANALYZE=false

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================
# Enable debug logging in development
DEBUG_MODE=true

# Disable authentication in development (for testing)
# WARNING: Never set to true in production!
DISABLE_AUTH_IN_DEV=false

# Mock external API calls in development
MOCK_EXTERNAL_APIS=false
